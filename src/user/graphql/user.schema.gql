scalar Email
scalar DateISO

type User {
  id: ID
  firstName: String
  lastName: String
  email: Email
  createdAt: DateISO
  updatedAt: DateISO
}

type Edge {
  node: User
  cursor: String
}

type PageInfo {
  startCursor: String
  hasNextPage: Boolean
}

type UserResult {
  totalCount: Int
  edges: [Edge]
  pageInfo: PageInfo
}

type Query {
  getUser(id: ID!): User
  listUsers(filters: UserListFilters, take: Int, cursor: String): UserResult
}

type Mutation {
  createUser(userCreateInput: UserCreateInput!): User
  updateUser(userUpdateInput: UserUpdateInput!): User
  deleteUser(id: ID!): User
}

input UserCreateInput {
  firstName: String!
  lastName: String!
  email: Email!
}

input UserUpdateInput {
  id: ID!
  firstName: String
  lastName: String
  email: Email
}

input UserCreatedAtFilter {
  after: DateISO
  before: DateISO
}

input UserListFilters {
  createdAtFilter: UserCreatedAtFilter
}